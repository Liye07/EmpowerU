@model Appointment

@{
    ViewBag.Title = "Manage Appointments";
    var pastAppointments = ViewBag.PastAppointments as List<Appointment>;
    var upcomingAppointments = ViewBag.UpcomingAppointments as List<Appointment>;
}

<div class="container mt-4">
    <!-- Filters & Search -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2 class="h4 mb-3">Manage Appointments</h2>
        </div>
        <div class="tab-buttons mb-4">
            <button id="past-btn" class="btn btn-secondary" onclick="showPastAppointments()">Past</button>
            <button id="upcoming-btn" class="btn btn-primary active" onclick="showUpcomingAppointments()">Upcoming</button>
        </div>
        <div class="col-md-4 text-right">
            <input type="text" class="form-control" placeholder="Search by name or service..." />
        </div>
    </div>

    <!-- Appointments and Details Section -->
    <div class="row">
        <!-- Appointments Tables -->
        <div class="col-md-7">
            <div id="upcoming-appointments-section">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Appointment ID</th>
                            <th>Full Name</th>
                            <th>Service</th>
                            <th>Date & Time</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in upcomingAppointments)
                        {
                            <tr class="appointment-row" onclick="showAppointmentDetails(@appointment.AppointmentID, '@appointment.Consumer.Name', '@appointment.Consumer.Email', '@appointment.Consumer.PhoneNumber', '@appointment.ServiceType', '@appointment.DateTime.ToString("dd MMM yyyy, hh:mm tt")', '@appointment.Status')">
                                <td>@appointment.AppointmentID</td>
                                <td>@appointment.Consumer.Name</td>
                                <td>@appointment.ServiceType</td>
                                <td>@appointment.DateTime.ToString("dd MMM yyyy, hh:mm tt")</td>
                                <td>
                                    <span class="badge @(appointment.Status == "Completed" ? "bg-success" :
                                                    appointment.Status == "Pending" ? "bg-warning" :
                                                    appointment.Status == "Scheduled" ? "bg-primary" :
                                                    appointment.Status == "Cancelled" ? "bg-danger" : "bg-secondary")">
                                        @appointment.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="pagination-controls">
                    <button class="btn btn-secondary" onclick="previousPage()">Previous</button>
                    <span id="page-number">Page 1</span>
                    <button class="btn btn-secondary" onclick="nextPage()">Next</button>
                </div>
            </div>

            <div id="past-appointments-section" style="display: none;">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Appointment ID</th>
                            <th>Name</th>
                            <th>Date & Time</th>
                            <th>Service Type</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in pastAppointments)
                        {
                            <tr class="appointment-row" onclick="showAppointmentDetails(@appointment.AppointmentID, '@appointment.Consumer.Name', '@appointment.Consumer.Email', '@appointment.Consumer.PhoneNumber', '@appointment.ServiceType', '@appointment.DateTime.ToString("dd MMM yyyy, hh:mm tt")', '@appointment.Status')">
                                <td>@appointment.AppointmentID</td>
                                <td>@appointment.Consumer.Name</td>
                                <td>@appointment.ServiceType</td>
                                <td>@appointment.DateTime.ToString("dd MMM yyyy, hh:mm tt")</td>
                                <td>
                                    <span class="badge @(appointment.Status == "Completed" ? "bg-success" :
                                                    appointment.Status == "Pending" ? "bg-warning" :
                                                    appointment.Status == "Scheduled" ? "bg-primary" :
                                                    appointment.Status == "Cancelled" ? "bg-danger" : "bg-secondary")">
                                        @appointment.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="pagination-controls">
                    <button class="btn btn-secondary" onclick="previousPage()">Previous</button>
                    <span id="page-number">Page 1</span>
                    <button class="btn btn-secondary" onclick="nextPage()">Next</button>
                </div>
            </div>
        </div>

        <!-- Appointment Details Section -->
        <div class="col-md-5">
            <h2 class="h5 mb-3">Appointment Details</h2>
            <div id="appointmentDetails" class="card p-3 mb-3" style="display: none;">
                <p><strong>Appointment ID:</strong> <span id="appointmentId"></span></p>
                <p><strong>Name:</strong> <span id="appointmentName"></span></p>
                <p><strong>Email:</strong> <span id="appointmentEmail"></span></p>
                <p><strong>Phone:</strong> <span id="appointmentPhone"></span></p>
                <p><strong>Service:</strong> <span id="appointmentService"></span></p>
                <p><strong>Date & Time:</strong> <span id="appointmentDateTime"></span></p>
                <p>
                    <strong>Status:</strong>
                    <span id="appointmentStatus" class="badge"></span>
                </p>
                <div class="button-container">
                    <button id="cancelButton" class="btn btn-danger mt-2" style="display: none;" onclick="cancelAppointment()">Cancel</button>
                    <button id="leaveReviewButton" class="btn btn-primary mt-2" style="display: none;">Leave a Review</button>
                    <button id="rescheduleButton" class="btn btn-warning mt-2" onclick="rescheduleAppointment()">Reschedule</button>
                    <button id="payNowButton" class="btn btn-success mt-2" style="display: none;">Pay Now</button>
                </div>
            </div>
            <div id="noAppointmentSelected" class="alert alert-info" style="display: block;">
                No appointment selected.
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cancelConfirmationModal" tabindex="-1" aria-labelledby="cancelConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelConfirmationModalLabel">Confirm Cancellation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cancelConfirmationMessage" class="d-none">
                    <p class="text-success" id="successMessage"></p>
                </div>
                <div id="cancelConfirmationPrompt">
                    <p>Are you sure you want to cancel this appointment?</p>
                    <p><strong>Appointment ID:</strong> <span id="cancelAppointmentId"></span></p>
                    <p><strong>Name:</strong> <span id="cancelConsumerName"></span></p>
                    <p><strong>Service Type:</strong> <span id="cancelServiceType"></span></p>
                    <p><strong>Date & Time:</strong> <span id="cancelDateTime"></span></p>
                    <div class="mb-3">
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="modalFooter">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmCancellation()">Confirm Cancellation</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="rescheduleModal" tabindex="-1" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rescheduleModalLabel">Reschedule Appointment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="rescheduleConfirmationMessage" class="d-none">
                    <p class="text-success">Appointment successfully rescheduled!</p>
                </div>
                <div id="rescheduleConfirmationPrompt">
                    <p>Are you sure you want to reschedule this appointment?</p>
                    <p><strong>Appointment ID:</strong> <span id="rescheduleAppointmentId"></span></p>
                    <p><strong>Name:</strong> <span id="rescheduleConsumerName"></span></p>
                    <p><strong>Service Type:</strong> <span id="rescheduleServiceType"></span></p>
                    <p><strong>Date & Time:</strong> <span id="rescheduleDateTime"></span></p>
                    <div class="mb-3">
                        <label for="newDateTime" class="form-label">New Date & Time:</label>
                        <input type="datetime-local" class="form-control" id="newDateTime">
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="modalFooter2">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="confirmReschedule()">Confirm Reschedule</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>

    function showPastAppointments() {
        document.getElementById('past-appointments-section').style.display = 'block';
        document.getElementById('upcoming-appointments-section').style.display = 'none';
        document.getElementById('past-btn').classList.add('btn-primary');
        document.getElementById('past-btn').classList.remove('btn-secondary');
        document.getElementById('upcoming-btn').classList.remove('btn-primary');
        document.getElementById('upcoming-btn').classList.add('btn-secondary');
    }

    function showUpcomingAppointments() {
        document.getElementById('upcoming-appointments-section').style.display = 'block';
        document.getElementById('past-appointments-section').style.display = 'none';
        document.getElementById('upcoming-btn').classList.add('btn-primary');
        document.getElementById('upcoming-btn').classList.remove('btn-secondary');
        document.getElementById('past-btn').classList.remove('btn-primary');
        document.getElementById('past-btn').classList.add('btn-secondary');
    }
    function showAppointmentDetails(id, name, email, phone, service, dateTime, status) {
        document.getElementById("appointmentId").innerText = id;
        document.getElementById("appointmentName").innerText = name;
        document.getElementById("appointmentEmail").innerText = email;
        document.getElementById("appointmentPhone").innerText = phone;
        document.getElementById("appointmentService").innerText = service;
        document.getElementById("appointmentDateTime").innerText = dateTime;

        var statusBadge = document.getElementById("appointmentStatus");
        statusBadge.innerText = status;
        statusBadge.className = "badge " + (status === "Completed" ? "bg-success" :
            status === "Pending" ? "bg-warning" :
                status === "Scheduled" ? "bg-primary" :
                    status === "Cancelled" ? "bg-danger" : "bg-secondary");

        document.getElementById("appointmentDetails").style.display = "block";
        document.getElementById("noAppointmentSelected").style.display = "none";

        // Clear previous success message
        document.getElementById("cancelConfirmationMessage").classList.add("d-none");
        document.getElementById("modalFooter").style.display = "block"; // Show footer buttons again

        document.getElementById("leaveReviewButton").style.display = (status === "Completed") ? 'block' : 'none';
        document.getElementById("payNowButton").style.display = (status === "Scheduled") ? 'block' : 'none';
        document.getElementById("rescheduleButton").style.display = (status === "Scheduled") ? 'block' : 'none';
        document.getElementById("cancelButton").style.display = (status === "Scheduled") ? 'block' : 'none';

    }

    function rescheduleAppointment() {
        const appointmentId = document.getElementById("appointmentId").innerText;
        const businessName = document.getElementById("appointmentName").innerText;
        const serviceType = document.getElementById("appointmentService").innerText;
        const appointmentDate = document.getElementById("appointmentDateTime").innerText;

        // Populate the reschedule modal with appointment details
        document.getElementById("rescheduleAppointmentId").innerText = appointmentId;
        document.getElementById("rescheduleConsumerName").innerText = businessName;
        document.getElementById("rescheduleServiceType").innerText = serviceType;
        document.getElementById("rescheduleDateTime").innerText = appointmentDate;

        // Show the reschedule modal
        const modal = new bootstrap.Modal(document.getElementById('rescheduleModal'));
        modal.show();
    }

    function confirmReschedule() {
        const newDateTime = document.getElementById("newDateTime").value;
        const appointmentId = document.getElementById("rescheduleAppointmentId").innerText;

        if (newDateTime) {
            fetch(`/appointments/reschedule/${appointmentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ DateTime: newDateTime })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Hide the prompt and modal footer
                        document.getElementById("rescheduleConfirmationPrompt").classList.add("d-none");
                        document.getElementById("modalFooter2").style.display = "none";

                        // Show success message in the modal
                        document.getElementById("rescheduleConfirmationMessage").classList.remove("d-none");
                        document.getElementById("successMessage").innerText = "Appointment rescheduled successfully!";

                        // Use setTimeout to hide the message after a few seconds
                        setTimeout(() => {
                            document.getElementById("rescheduleConfirmationMessage").classList.add("d-none");
                            resetAppointmentDetails();
                            // Reload the appointment list here
                            location.reload();
                        }, 3000); // Hide after 3 seconds (3000 milliseconds)
                    } else {
                        // Display error message based on response
                        alert(data.message || "Failed to reschedule appointment. Please try again.");
                    }
                })
                .catch(error => console.error("Error:", error));
        } else {
            alert("Please select a valid date and time for rescheduling.");
        }
    }



    function cancelAppointment() {
        const appointmentId = document.getElementById("appointmentId").innerText;
        const businessName = document.getElementById("appointmentName").innerText;
        const serviceType = document.getElementById("appointmentService").innerText;
        const appointmentDate = document.getElementById("appointmentDateTime").innerText;

        // Populate the modal with appointment details
        document.getElementById("cancelAppointmentId").innerText = appointmentId;
        document.getElementById("cancelConsumerName").innerText = businessName;
        document.getElementById("cancelServiceType").innerText = serviceType;
        document.getElementById("cancelDateTime").innerText = appointmentDate;

        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('cancelConfirmationModal'));
        modal.show();
    }

    function confirmCancellation() {
        const appointmentId = document.getElementById("cancelAppointmentId").innerText;

        // Call the backend to cancel the appointment
        fetch(`/appointments/cancel/${appointmentId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide the prompt and modal footer
                    document.getElementById("cancelConfirmationPrompt").style.display = "none";
                    document.getElementById("modalFooter").style.display = "none";

                    // Show success message in the modal
                    document.getElementById("cancelConfirmationMessage").classList.remove("d-none");
                    document.getElementById("successMessage").innerText = "Appointment canceled successfully!";

                    // Use setTimeout to hide the message after a few seconds
                    setTimeout(() => {
                        document.getElementById("cancelConfirmationMessage").classList.add("d-none");
                        resetAppointmentDetails();
                        // You might also want to reload or refresh the appointment list here
                        location.reload();
                    }, 3000); // Hide after 3 seconds (3000 milliseconds)

                } else {
                    alert("Failed to cancel appointment."); // Handle cancellation failure
                }
            })
            .catch(error => console.error("Error:", error));
    }


    function resetAppointmentDetails() {
        document.getElementById("appointmentId").innerText = '';
        document.getElementById("appointmentName").innerText = '';
        document.getElementById("appointmentEmail").innerText = '';
        document.getElementById("appointmentPhone").innerText = '';
        document.getElementById("appointmentService").innerText = '';
        document.getElementById("appointmentDateTime").innerText = '';
        document.getElementById("appointmentStatus").innerText = '';
        document.getElementById("appointmentDetails").style.display = "none";
        document.getElementById("noAppointmentSelected").style.display = "block"; // Show the no appointment selected message
    }

    let currentPage = 1;
    const rowsPerPage = 8;

    // Initialize pagination for upcoming appointments
    function paginateTable(tableId, rows) {
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = startIndex + rowsPerPage;

        rows.forEach((row, index) => {
            row.style.display = (index >= startIndex && index < endIndex) ? '' : 'none';
        });

        document.getElementById('page-number').innerText = `Page ${currentPage} of ${totalPages}`;
    }

    // Move to the next page
    function nextPage() {
        const table = document.querySelector('#upcoming-appointments-section table tbody');
        const rows = Array.from(table.querySelectorAll('tr'));

        if (currentPage < Math.ceil(rows.length / rowsPerPage)) {
            currentPage++;
            paginateTable('upcoming-appointments-section', rows);
        }
    }

    // Move to the previous page
    function previousPage() {
        const table = document.querySelector('#upcoming-appointments-section table tbody');
        const rows = Array.from(table.querySelectorAll('tr'));

        if (currentPage > 1) {
            currentPage--;
            paginateTable('upcoming-appointments-section', rows);
        }
    }

    // Initialize pagination on page load
    document.addEventListener('DOMContentLoaded', function () {
        const upcomingTableRows = Array.from(document.querySelectorAll('#upcoming-appointments-section tbody tr'));
        paginateTable('upcoming-appointments-section', upcomingTableRows);

        const pastTableRows = Array.from(document.querySelectorAll('#past-appointments-section tbody tr'));
        paginateTable('past-appointments-section', pastTableRows);
    });



</script>
<style>
    .table-hover tbody tr:hover {
        background-color: #f0f8ff; /* Light blue background on hover */
    }

    
    .appointment-details {
        display: none; /* Initially hidden */
    }

    .table td, .table th {
        white-space: nowrap; /* Prevent text wrapping */
    }


    .button-container {
        display: flex; /* Enable flexbox */
        flex-wrap: wrap; /* Allow wrapping */
        gap: 10px; /* Space between buttons */
    }

        .button-container button {
            min-width: 60px; /* Optional: Set a minimum width */
        }


</style>

@{
    ViewData["Title"] = "Search";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Businesses</title>
    <style>

        .business-link {
            text-decoration: none; /* Removes the default underline */
            color: inherit; /* Ensures the link doesn't change text color */
        }

        .search-location-marker {
            background: none;
        }

        .search-marker-inner {
            width: 20px;
            height: 20px;
            background-color: #0066cc;
            border: 3px solid white;
            border-radius: 50%;
            box-shadow: 0 0 0 2px #0066cc;
        }

        .popup-content {
            min-width: 200px;
            padding: 10px;
        }

        .business-card {
            cursor: pointer;
            transition: transform 0.2s;
        }

            .business-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

        /* Style adjustments for layout */
        .container {
            display: flex;
            width: 100%;
        }

        .sidebar {
            width: 30%;
            padding: 10px;
            border-right: 1px solid #ccc;
            max-height: 500px;
            overflow-y: auto;
            background-color: #f1f1f1;
        }

        .map {
            width: 70%;
            padding: 10px;
            position: relative;
            height: 400px; /* Explicitly set height */
        }

        .business-card img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        /* Leaflet map styling */
        #map {
            width: 100%;
            height: 100%; /* Make map fill the container */
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <!-- Add these in the head section -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
</head>
<body>
    <div class="header">
        <div class="search-bar">
            <h1>EmpowerU</h1>
            <input type="text" id="searchInput" placeholder="Enter business or location">
        </div>
    </div>

    <div class="container">
        <!-- Sidebar with business results -->
        <div class="sidebar">
            <h6>Search results: Businesses in <span id="locationLabel">[Specified location]</span></h6>

            @foreach (var business in Model)
            {
                <div class="business-card">
                    <a href="@Url.Action("Details", "Businesses", new { id = business.Id })" class="business-link">
                        <img src="data:image/png;base64,@(Convert.ToBase64String(business.ProfilePicture ?? new byte[0]))" alt="Logo">
                        <div class="business-details">
                            <h5>@business.Name</h5>
                            <p>@business.Description</p>
                            <p>Category: @business.BusinessCategory</p>
                            <p>Rating: @business.Rating</p>
                        </div>
                    </a>
                </div>
            }

        </div>

        <!-- Map section positioned on the right side -->
        <div class="map">
            <div id="map"></div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Get URL parameters (latitude, longitude, and address)
        const urlParams = new URLSearchParams(window.location.search);
        const centerLat = parseFloat(urlParams.get('lat')) || 0;
        const centerLon = parseFloat(urlParams.get('lon')) || 0;
        const address = urlParams.get('address') || '[Location not specified]';
        const searchRadius = 10; // km

        // Set location label
        document.getElementById("locationLabel").textContent = decodeURIComponent(address);

        // Initialize the map
        const map = L.map('map').setView([centerLat, centerLon], 13);

        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add cluster group for markers
        const markers = L.markerClusterGroup();

        // Add the search location marker
        const searchMarker = L.marker([centerLat, centerLon], {
            icon: L.divIcon({
                className: 'search-location-marker',
                html: '<div class="search-marker-inner"></div>',
                iconSize: [20, 20]
            })
        }).addTo(map);

        // Add a circle to show the search radius
        const radiusCircle = L.circle([centerLat, centerLon], {
            radius: searchRadius * 1000, // Convert km to meters
            color: '#0066cc',
            fillColor: '#0066cc',
            fillOpacity: 0.1,
            weight: 1
        }).addTo(map);

        // Function to calculate distance between two lat/lon points
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the Earth in km
            const dLat = (lat2 - lat1) * (Math.PI / 180);
            const dLon = (lon2 - lon1) * (Math.PI / 180);
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distance in km
        }

        // Function to add a red pin marker for each business
        function addBusinessMarker(business) {
            const latitude = business.LocationService?.Latitude;
            const longitude = business.LocationService?.Longitude;

            if (latitude && longitude) {
                const distance = calculateDistance(centerLat, centerLon, latitude, longitude);

                // Check if the business is within the search radius
                if (distance <= searchRadius) {
                    // Use a red pin for business markers
                    const redPinIcon = L.icon({
                        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-red.png', // Red pin image URL
                        iconSize: [25, 41], // Size of the icon
                        iconAnchor: [12, 41], // Anchor point of the icon
                        popupAnchor: [0, -41] // Position of the popup
                    });

                    const marker = L.marker([latitude, longitude], { icon: redPinIcon })
                        .bindPopup(`
                                <div class="popup-content">
                                    <h5>${business.Name}</h5>
                                    <p>${business.Description}</p>
                                    <p>Category: ${business.BusinessCategory}</p>
                                    <div class="rating">${getStarRating(business.Rating)}</div>
                                    <button onclick="viewBusinessDetails(${business.Id})" class="btn btn-sm btn-primary mt-2">
                                        View Details
                                    </button>
                                </div>
                            `);

                    markers.addLayer(marker);

                    // Return the marker object for reference
                    return marker;
                }
            }
        }

        // Function to generate star rating HTML
        function getStarRating(rating) {
            let stars = '';
            for (let i = 1; i <= 5; i++) {
                stars += i <= rating ? '<i class="fas fa-star text-warning"></i>' : '<i class="far fa-star text-warning"></i>';
            }
            return stars;
        }

        // Function to view business details
        function viewBusinessDetails(businessId) {
            window.location.href = `/Businesses/Details/${businessId}`;
        }

        // Initialize businesses from server-side model data
        const businesses = @Html.Raw(Json.Serialize(Model));

        // Add markers for each business within the search radius
        let businessMarkers = {};
        businesses.forEach(business => {
            const marker = addBusinessMarker(business);
            if (marker) {
                businessMarkers[business.Id] = marker; // Store the marker for later reference
            }
        });

        // Add marker cluster to map
        map.addLayer(markers);

        // Fit map bounds to include all markers
        if (markers.getLayers().length > 0) {
            const bounds = markers.getBounds().extend(searchMarker.getLatLng());
            map.fitBounds(bounds);
        }

        // Add event listeners to sidebar items (assuming you have a list of businesses on the sidebar)
        document.querySelectorAll('.business-item').forEach(item => {
            item.addEventListener('click', (event) => {
                const businessId = item.dataset.businessId;
                const marker = businessMarkers[businessId];

                if (marker) {
                    map.setView(marker.getLatLng(), 15); // Zoom in on the marker
                    marker.openPopup(); // Open the marker popup
                }
            });
        });

    </script>

</body>
</html>

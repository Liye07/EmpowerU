@{
    ViewData["Title"] = "Search";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Businesses</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        .sidebar a {
            text-decoration: none; /* Removes underline for all links in the sidebar */
            color: inherit; /* Keeps text color consistent */
        }

            .sidebar a:hover {
                text-decoration: none; /* Ensures no underline on hover */
            }

        /* General Page Styling */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
        }

        /* Header with Search Bar */
        .header {
            background-color: #007baa;
            padding: 20px;
            text-align: center;
            color: white;
        }

        .search-bar input {
            width: 80%;
            padding: 10px;
            margin-top: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Main Container Layout */
        .container {
            display: flex;
            width: 100%;
            margin-top: 20px;
        }

        /* Sidebar Styling */
        .sidebar {
            width: 30%;
            padding: 15px;
            border-right: 1px solid #e0e0e0;
            background-color: #ffffff;
            max-height: calc(100vh - 120px);
            overflow-y: auto;
        }

            .sidebar h6 {
                font-size: 18px;
                margin-bottom: 15px;
                color: #343a40;
            }

        .business-card {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 15px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .business-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            .business-card img {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                object-fit: cover;
                margin-bottom: 10px;
            }

        .business-details {
            text-align: left;
        }

            .business-details h5 {
                font-size: 18px;
                margin-bottom: 5px;
                color: #0066cc;
            }

            .business-details p {
                margin: 0;
                font-size: 14px;
                color: #555;
            }

            .business-details .fas, .business-details .far {
                margin-right: 3px;
            }

            .business-details .greyed-rating {
                font-size: 12px;
                color: #888;
            }

        /* Map Section */
        .map {
            width: 70%;
            padding: 10px;
            height: 500px;
        }

        #map {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <!-- Header with Search Bar -->
    <div class="header">
        <h1>What Can We Help You Find Today?</h1>
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search for businesses or locations...">
        </div>
    </div>

    <!-- Main Content -->
    <div class="container">
        <!-- Sidebar with Business Results -->
        <div class="sidebar">
            <h9><b>Search Results:</b> Businesses in <span id="locationLabel">[Specified Location]</span></h9>

            @foreach (var business in Model)
            {
                <div class="business-card text-center">
                    <a href="@Url.Action("Details", "Businesses", new { id = business.Id })" class="business-link">
                        <img @* src="data:image/png;base64,@(Convert.ToBase64String(business.ProfilePicture ?? new byte[0]))" *@ alt="Business Logo" src="https://static.vecteezy.com/system/resources/previews/024/284/257/original/beauty-salon-logo-design-free-vector.jpg">
                        <div class="business-details text-center">
                            <h5>@business.Name</h5>
                            <p>@business.Description</p>
                            <p>Category: @business.BusinessCategory</p>
                            <p>
                                @for (var i = 1; i <= 5; i++)
                                {
                                    if (i <= @business.Rating)
                                    {
                                        <span class="fas fa-star" style="color: #FFD700;"></span>
                                    }
                                    else
                                    {
                                        <span class="far fa-star" style="color: #D3D3D3;"></span>
                                    }
                                }
                                <span class="greyed-rating">(@business.Rating)</span>
                            </p>
                        </div>
                    </a>
                </div>
            }
        </div>

        <!-- Map Section -->
        <div class="map">
            <div id="map"></div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Get URL parameters (latitude, longitude, and address)
        const urlParams = new URLSearchParams(window.location.search);
        const centerLat = parseFloat(urlParams.get('lat')) || 0;
        const centerLon = parseFloat(urlParams.get('lon')) || 0;
        const address = urlParams.get('address') || '[Location not specified]';
        const searchRadius = 10; // km

        // Set location label
        document.getElementById("locationLabel").textContent = decodeURIComponent(address);

        // Initialize the map
        const map = L.map('map').setView([centerLat, centerLon], 13);

        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add cluster group for markers
        const markers = L.markerClusterGroup();

        // Add the search location marker
        const searchMarker = L.marker([centerLat, centerLon], {
            icon: L.divIcon({
                className: 'search-location-marker',
                html: '<div class="search-marker-inner"></div>',
                iconSize: [20, 20]
            })
        }).addTo(map);

        // Add a circle to show the search radius
        const radiusCircle = L.circle([centerLat, centerLon], {
            radius: searchRadius * 1000, // Convert km to meters
            color: '#0066cc',
            fillColor: '#0066cc',
            fillOpacity: 0.1,
            weight: 1
        }).addTo(map);

        // Function to calculate distance between two lat/lon points
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the Earth in km
            const dLat = (lat2 - lat1) * (Math.PI / 180);
            const dLon = (lon2 - lon1) * (Math.PI / 180);
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distance in km
        }

        // Function to add a red pin marker for each business
        function addBusinessMarker(business) {
            const latitude = business.LocationService?.Latitude;
            const longitude = business.LocationService?.Longitude;

            if (latitude && longitude) {
                const distance = calculateDistance(centerLat, centerLon, latitude, longitude);

                // Check if the business is within the search radius
                if (distance <= searchRadius) {
                    // Use a red pin for business markers
                    const redPinIcon = L.icon({
                        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-red.png', // Red pin image URL
                        iconSize: [25, 41], // Size of the icon
                        iconAnchor: [12, 41], // Anchor point of the icon
                        popupAnchor: [0, -41] // Position of the popup
                    });

                    const marker = L.marker([latitude, longitude], { icon: redPinIcon })
                        .bindPopup(`
                                <div class="popup-content">
                                    <h5>${business.Name}</h5>
                                    <p>${business.Description}</p>
                                    <p>Category: ${business.BusinessCategory}</p>
                                    <div class="rating">${getStarRating(business.Rating)}</div>
                                    <button onclick="viewBusinessDetails(${business.Id})" class="btn btn-sm btn-primary mt-2">
                                        View Details
                                    </button>
                                </div>
                            `);

                    markers.addLayer(marker);

                    // Return the marker object for reference
                    return marker;
                }
            }
        }

        // Function to generate star rating HTML
        function getStarRating(rating) {
            let stars = '';
            for (let i = 1; i <= 5; i++) {
                stars += i <= rating ? '<i class="fas fa-star text-warning"></i>' : '<i class="far fa-star text-warning"></i>';
            }
            return stars;
        }

        // Function to view business details
        function viewBusinessDetails(businessId) {
            window.location.href = `/Businesses/Details/${businessId}`;
        }

        // Initialize businesses from server-side model data
        const businesses = @Html.Raw(Json.Serialize(Model));

        // Add markers for each business within the search radius
        let businessMarkers = {};
        businesses.forEach(business => {
            const marker = addBusinessMarker(business);
            if (marker) {
                businessMarkers[business.Id] = marker; // Store the marker for later reference
            }
        });

        // Add marker cluster to map
        map.addLayer(markers);

        // Fit map bounds to include all markers
        if (markers.getLayers().length > 0) {
            const bounds = markers.getBounds().extend(searchMarker.getLatLng());
            map.fitBounds(bounds);
        }

        // Add event listeners to sidebar items (assuming you have a list of businesses on the sidebar)
        document.querySelectorAll('.business-item').forEach(item => {
            item.addEventListener('click', (event) => {
                const businessId = item.dataset.businessId;
                const marker = businessMarkers[businessId];

                if (marker) {
                    map.setView(marker.getLatLng(), 15); // Zoom in on the marker
                    marker.openPopup(); // Open the marker popup
                }
            });
        });

    </script>

</body>

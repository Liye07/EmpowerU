@{
    ViewData["Title"] = "Search";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Businesses</title>
    <style>
        /* Style adjustments for layout */
        .container {
            display: flex;
            width: 100%;
        }

        .sidebar {
            width: 30%;
            padding: 10px;
            border-right: 1px solid #ccc;
            max-height: 500px;
            overflow-y: auto;
            background-color: #f1f1f1;
        }

        .map {
            width: 70%;
            padding: 10px;
            position: relative;
            height: 400px; /* Explicitly set height */
        }

        .business-card img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        /* Leaflet map styling */
        #map {
            width: 100%;
            height: 100%; /* Make map fill the container */
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>
<body>
    <div class="header">
        <div class="search-bar">
            <h1>EmpowerU</h1>
            <input type="text" id="searchInput" placeholder="Enter business or location">
        </div>
    </div>

    <div class="container">
        <!-- Sidebar with business results -->
        <div class="sidebar">
            <h6>Search results: Businesses in <span id="locationLabel">[Specified location]</span></h6>

            @foreach (var business in Model)
            {
                <div class="business-card">
                    <img src="data:image/png;base64,@(Convert.ToBase64String(business.ProfilePicture ?? new byte[0]))" alt="Logo">
                    <div class="business-details">
                        <h5>@business.Name</h5>
                        <p>@business.Description</p>
                        <p>Category: @business.BusinessCategory</p>
                        <p>Rating: @business.Rating</p>
                    </div>
                </div>
            }
        </div>

        <!-- Map section positioned on the right side -->
        <div class="map">
            <div id="map"></div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Get URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const lat = parseFloat(urlParams.get('lat')) || 0;
        const lon = parseFloat(urlParams.get('lon')) || 0;
        const address = urlParams.get('address') || '[Location not specified]';

        // Update location label
        document.getElementById("locationLabel").textContent = decodeURIComponent(address);

        // Initialize map with the searched location
        const map = L.map('map').setView([lat, lon], 13); // Higher zoom level (13) for better detail

        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add a marker for the searched location
        const searchMarker = L.marker([lat, lon])
            .addTo(map)
            .bindPopup('<b>Searched Location</b>')
            .openPopup();

        // Function to add business markers to the map
        function addBusinessMarker(business) {
            const marker = L.marker([business.Latitude, business.Longitude])
                .addTo(map)
                .bindPopup(`
                        <div class="popup-content">
                            <h5>${business.Name}</h5>
                            <p>${business.Description}</p>
                            <p>Category: ${business.BusinessCategory}</p>
                            <p>Rating: ${business.Rating}</p>
                        </div>
                    `);

            // Store marker reference for later use
            return marker;
        }

        // Add markers for initial business data
        const businesses = @Json.Serialize(Model);
        const markers = [];

        businesses.forEach(business => {
            if (business.Latitude && business.Longitude) {
                const marker = addBusinessMarker(business);
                markers.push(marker);
            }
        });

        // Create a bounds object that includes all markers and the search location
        if (markers.length > 0) {
            const bounds = L.featureGroup([searchMarker, ...markers]).getBounds();
            map.fitBounds(bounds, { padding: [50, 50] });
        }

        // Handle search input
        document.getElementById("searchInput").addEventListener("input", function () {
            const searchTerm = this.value;

            // Only search if there's input
            if (searchTerm.trim().length > 2) {
                fetch(`@Url.Action("Search", "Consumer")?searchTerm=${searchTerm}&lat=${lat}&lon=${lon}`)
                    .then(response => response.json())
                    .then(data => {
                        // Clear previous results
                        const businessResults = document.querySelector(".sidebar");
                        businessResults.innerHTML = `<h6>Search results near: <span id="locationLabel">${decodeURIComponent(address)}</span></h6>`;

                        // Clear existing business markers (but keep search location marker)
                        markers.forEach(marker => map.removeLayer(marker));
                        markers.length = 0;

                        // Populate results and add markers to the map
                        data.forEach(business => {
                            // Create business card
                            const card = document.createElement("div");
                            card.className = "business-card";
                            card.innerHTML = `
                                    <img src="data:image/png;base64,${business.ProfilePicture}" alt="Logo">
                                    <div class="business-details">
                                        <h5>${business.Name}</h5>
                                        <p>${business.Description}</p>
                                        <p>Category: ${business.BusinessCategory}</p>
                                        <p>Rating: ${business.Rating}</p>
                                    </div>
                                `;
                            businessResults.appendChild(card);

                            // Add marker if coordinates exist
                            if (business.Latitude && business.Longitude) {
                                const marker = addBusinessMarker(business);
                                markers.push(marker);
                            }
                        });

                        // Update map bounds to show all markers
                        if (markers.length > 0) {
                            const bounds = L.featureGroup([searchMarker, ...markers]).getBounds();
                            map.fitBounds(bounds, { padding: [50, 50] });
                        }
                    })
                    .catch(error => console.error('Error fetching search results:', error));
            }
        });
    </script>
</body>
</html>
